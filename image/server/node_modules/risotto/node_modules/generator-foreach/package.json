{
  "name": "generator-foreach",
  "version": "0.1.0",
  "description": "forEach for generators",
  "main": "index.js",
  "scripts": {
    "test": "mocha --harmony"
  },
  "author": {
    "name": "Vladimir Kurchatkin",
    "email": "vladimir.kurchatkin@gmail.com"
  },
  "license": "MIT",
  "devDependencies": {
    "should": "~2.1.1",
    "mocha": "~1.16.2"
  },
  "readme": "# generator-foreach\n## forEach for generators\n\nImagine you want to use `forEach` inside a generator function:\n\n```javascript\n\nvar stuff = [1, 2, 3, 4, 5]\n\nfunction * fn () {\n  stuff.forEach(something)\n\n  function something (item) {\n    console.log(item)\n  }\n}\n\nfor (var i of fn());\n\n```\n\nIt works ok, but what if you want to yield a value based on an `item`?\n\n```javascript\n\nvar stuff = [1, 2, 3, 4, 5]\n\nfunction * fn () {\n  stuff.forEach(something)\n\n  function something (item) {\n    yield item\n  }\n}\n\nfor (var i of fn()) console.log(i)\n\n```\n\nDoesn't work anymore! You can't use `yield` inside an ordinary function. So `generator-foreach` comes into play:\n\n```javascript\n\nvar foreach = require('generator-foreach')\nvar stuff = [1, 2, 3, 4, 5]\n\nfunction * fn () {\n  yield * foreach(stuff, something)\n\n  function * something (item) {\n    yield item\n  }\n}\n\nfor (var i of fn()) console.log(i)\n\n```\n\nDo use it you need to remember a couple of things:\n\n - pass an array as a first argument;\n - use `yield *` before `foreach`;\n - make your iterator generator function.\n\n\n# Examples\n## Basic\n\nUse `--harmony` or `--harmony-generators --harmony-iteration` flags\n\n```javascript\n/**\n * basic example\n */\n\nvar foreach = require('generator-foreach')\n\nfunction * gen (array) {\n  yield * foreach(array, function * (num) {\n    yield num + 1\n  })\n}\n\n\nfor (var num of gen([1, 2, 3])) console.log(num)\n\n```\n\n## Fancy recursive array flattening\n\nUse `--harmony` or `--harmony-generators --harmony-iteration` flags\n\n```javascript\n/**\n * fancy recursive array flattening\n */\n\nvar foreach = require('generator-foreach')\n\nfunction * value (val) {\n  yield val\n}\n\nfunction * flatten (array) {\n  yield * Array.isArray(array) ? foreach(array, flatten) : value(array)\n}\n\nvar array = [1, 2, [3, [4, 5, [6, 7]]]]\n\nfor (var num of flatten(array)) console.log(num)\n\n```\n",
  "readmeFilename": "README.md",
  "_id": "generator-foreach@0.1.0",
  "_shasum": "62fdf74cc77d37899bbbd154db9af6bf245f0f7e",
  "_from": "generator-foreach@~0.1.0",
  "_resolved": "https://registry.npmjs.org/generator-foreach/-/generator-foreach-0.1.0.tgz"
}
